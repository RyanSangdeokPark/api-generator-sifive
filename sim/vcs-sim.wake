tuple VCSDUTSimulatorPlan =
  global TestDriver:     String
  global Waves:          Boolean
  global Score:          DUT => DUTSimCompileOptions => DUTSimExecuteOptions => UserSimulationOptions => Double
  global CompileOptions: DUT => PrivateVCSDUTSimCompileOptions
  global ExecuteOptions: DUT => PrivateVCSDUTSimExecuteOptions

global def makeVCSDUTSimulatorPlan testDriver waves score compileOptions executeOptions =
  VCSDUTSimulatorPlan testDriver waves score compileOptions executeOptions


tuple VCSDUTSimCompileOptions =
  global GenericOpts: DUTSimCompileOptions
  global ExtraArgs:   List NamedArg

tuple PrivateVCSDUTSimCompileOptions =
  global DUTOpts:   DUTSimCompileOptions
  global ExtraArgs: List NamedArg

global def makePrivateVCSDUTSimCompileOptions =
  def dutOpts =
    emptyDUTSimCompileOptions
    | setDUTSimCompileOptionsResources defaultVCSResources
  PrivateVCSDUTSimCompileOptions dutOpts Nil

def toVCSSimCompilePlan privateOpts outputDir =
  def dutOpts      = privateOpts.getPrivateVCSDUTSimCompileOptionsDUTOpts

  def resources    = dutOpts.getDUTSimCompileOptionsResources
  def includeDirs  = dutOpts.getDUTSimCompileOptionsIncludeDirs
  def defines      = dutOpts.getDUTSimCompileOptionsDefines
  def sourceFiles  = dutOpts.getDUTSimCompileOptionsSourceFiles
  def plusargs     = dutOpts.getDUTSimCompileOptionsPlusargs
  def extraArgs    = privateOpts.getPrivateVCSDUTSimCompileOptionsExtraArgs

  makeVCSCompilePlan sourceFiles outputDir
  | setVCSCompilePlanResources   resources
  | setVCSCompilePlanExtraArgs   extraArgs
  | setVCSCompilePlanIncludeDirs includeDirs
  | setVCSCompilePlanDefines     defines
  | setVCSCompilePlanPlusargs    plusargs

tuple VCSDUTSimExecuteOptions =
  global GenericOpts: DUTSimExecuteOptions
  global ExtraArgs:   List NamedArg

tuple PrivateVCSDUTSimExecuteOptions =
  global DUTOpts:   DUTSimExecuteOptions
  global ExtraArgs: List NamedArg

global def makePrivateVCSDUTSimExecuteOptions =
   PrivateVCSDUTSimExecuteOptions emptyDUTSimExecuteOptions Nil

def toVCSSimExecutePlan opts compileOutputs outputDir =
  def genericOpts = opts.getPrivateVCSDUTSimExecuteOptionsDUTOpts

  def plusargs     = genericOpts.getDUTSimExecuteOptionsPlusargs
  def visibleFiles = genericOpts.getDUTSimExecuteOptionsVisibleFiles
  def resources    = genericOpts.getDUTSimExecuteOptionsResources
  def extraArgs    = opts.getPrivateVCSDUTSimExecuteOptionsExtraArgs

  makeVCSExecutePlan compileOutputs outputDir
  | setVCSExecutePlanPlusargs     plusargs
  | setVCSExecutePlanVisibleFiles visibleFiles
  | setVCSExecutePlanExtraArgs    extraArgs
  | setVCSExecutePlanResources    resources


# takes a VCSDUTSimulatorPlan and makes a DUTSimulator
global def makeVCSDUTSimulator plan =
  def simName   = "vcs"
  def simVendor = "synopsys"
  def testDriver = plan.getVCSDUTSimulatorPlanTestDriver
  def waves  = plan.getVCSDUTSimulatorPlanWaves
  def score  = plan.getVCSDUTSimulatorPlanScore

  def imp dut rawCompileOptions rawExecuteOptions userOptions =
    def filter sim = dutSimulatorNameEquals simName sim && dutSimulatorVendorEquals simVendor sim

    def compileOutputs =
      def appendUserPlusargs = editDUTSimCompileOptionsPlusargs (_ ++ userOptions.getUserSimulationOptionsCompilePlusargs)
      def appendDUTOptions = appendDUTSimCompileOptions rawCompileOptions
      def privateOpts =
        plan.getVCSDUTSimulatorPlanCompileOptions dut
        | editPrivateVCSDUTSimCompileOptionsDUTOpts appendDUTOptions
        | editPrivateVCSDUTSimCompileOptionsDUTOpts appendUserPlusargs
        | applyPartialEdits dut (subscribe vcsDUTSimCompileOptionsHooks)
      def outputDir = userOptions.getUserSimulationOptionsCompileOutputDir
      toVCSSimCompilePlan privateOpts outputDir
      | doVCSCompile

    def executeOutputs =
      def appendUserPlusargs = editDUTSimExecuteOptionsPlusargs (_ ++ userOptions.getUserSimulationOptionsExecutePlusargs)
      def appendDUTOptions = appendDUTSimExecuteOptions rawExecuteOptions
      def privateOpts =
        plan.getVCSDUTSimulatorPlanExecuteOptions dut
        | editPrivateVCSDUTSimExecuteOptionsDUTOpts appendDUTOptions
        | editPrivateVCSDUTSimExecuteOptionsDUTOpts appendUserPlusargs
        | applyPartialEdits dut (subscribe vcsDUTSimExecuteOptionsHooks)
      def outputDir = userOptions.getUserSimulationOptionsExecuteOutputDir
      toVCSSimExecutePlan privateOpts compileOutputs outputDir
      | doVCSExecute

    executeOutputs
    | getVCSExecuteOutputsJob
    | makeSimulationOutput

  makeDUTSimulatorPlan simName simVendor testDriver waves score imp
  | makeDUTSimulator


def vcsCompileOptsExtract waves dut =

  def extraArgs =
    NamedArg "-full64",             NamedArg "-notice",      NamedArg "-error=VCM-HFUFR",
    NamedArg "-error=LFCOR",        NamedArg "-error=CFCOR", NamedArg "-error=BMII",
    NamedArg "-quiet",              NamedArg "+vcs+lic+wait",
    NamedArg "-Mupdate",            NamedArg "+vc+list",     NamedArg "-sverilog",
    NamedArg "-ntb_opts",           NamedArg "uvm-1.2",      NamedArg "-j4",
    NamedArg "+rad",                NamedArg "-hsopt=gates", NamedArg "-O3",
    NamedArg "-reportstats",        NamedArg "-assert",      NamedArg "svaext",
    Nil

  def withWavesOptions opts =
    if waves
    then
      def withExtraArgs =
        NamedArg "-kdb",
        NamedArg "-lca",
        NamedArg "-fno-lto",
        _
      def withDefines =
        NamedArg "SVT_FSDB_ENABLE",
        NamedArg "DEBUG",
        _
      opts
      | editPrivateVCSDUTSimCompileOptionsExtraArgs withExtraArgs
      | editPrivateVCSDUTSimCompileOptionsDUTOpts (editDUTSimCompileOptionsDefines withDefines)
    else opts

  def genericOpts =
    freedomTestDriverSimCompileOpts dut
    | editDUTSimCompileOptionsDefines (NamedArg "VCS", _)

  makePrivateVCSDUTSimCompileOptions
  | editPrivateVCSDUTSimCompileOptionsDUTOpts genericOpts.appendDUTSimCompileOptions
  | setPrivateVCSDUTSimCompileOptionsExtraArgs extraArgs
  | withWavesOptions

def vcsExecuteOptsExtract waves dut =
  def withExtraArgs =
    NamedArgString "-assert" "old_ctrl_msg",
    NamedArgString "-assert" "nopostproc",
    NamedArgString "-assert" "global_finish_maxfail=10",
    NamedArg "-error=STASKW_CO1",
    NamedArg "-error=STASKW_RMCOF",
    NamedArg "-error=STASKW_RMIEAFL",
    NamedArg "-error=PHNE",
    _

  def withWavesOptions opts =
    if waves
    then
      editPrivateVCSDUTSimExecuteOptionsDUTOpts (editDUTSimExecuteOptionsPlusargs (NamedArgString "vcdplusfile" "sim.vpd", _)) opts
    else opts

  def genericOpts = freedomTestDriverSimExecuteOpts dut

  makePrivateVCSDUTSimExecuteOptions
  | editPrivateVCSDUTSimExecuteOptionsDUTOpts genericOpts.appendDUTSimExecuteOptions
  | editPrivateVCSDUTSimExecuteOptionsExtraArgs withExtraArgs
  | withWavesOptions

def makeFreedomVCSDUTSimulator waves =
  def name = "vcs"
  def score = (\_ \_ \_ \_ 1.0) # TODO
  def compileOptions = vcsCompileOptsExtract waves
  def executeOptions = vcsExecuteOptsExtract waves
  makeVCSDUTSimulatorPlan name waves score compileOptions executeOptions
  | makeVCSDUTSimulator


publish dutSimulators = freedomVCSDUTSimulator, freedomVCSWavesDUTSimulator, Nil
global def freedomVCSDUTSimulator = makeFreedomVCSDUTSimulator False
global def freedomVCSWavesDUTSimulator = makeFreedomVCSDUTSimulator True
